{
  "name": "shortid",
  "tagline": "Super short, unique, non sequential, URL friendly IDs for Go",
  "body": "\r\n[![Build status][buildimage]][travis] [![Coverage][codecovimage]][codecov] [![GoReportCard][goreportcardimage]][goreportcard] [![API documentation][godocimage]][docs]\r\n\r\n# Short-Id Generator for Go\r\n\r\nThe `go-shortid` library (package `shortid`) enables the generation of short, fully unique,\r\nnon-sequential and by default URL friendly Ids at a rate of hundreds of thousand per second. It\r\nguarantees uniqueness during the time period until 2050!\r\n\r\nThe package is heavily inspired by the node.js [shortid][nodeshortid] library (see more detail below).\r\n\r\nThe easiest way to start generating Ids is:\r\n\r\n\tfmt.Printf(shortid.Generate())\r\n\tfmt.Printf(shortid.Generate())\r\n\r\nThe recommended one is to initialise and reuse a generator specific to a given worker:\r\n\r\n\tsid := shortid.New(1, shortid.DefaultAbc, 2342)\r\n\r\n\t// then either:\r\n\tfmt.Printf(sid.Generate())\r\n\tfmt.Printf(sid.Generate())\r\n\r\n\t// or:\r\n\tshortid.SetDefault(sid)\r\n\t// followed by:\r\n\tfmt.Printf(shortid.Generate())\r\n\tfmt.Printf(shortid.Generate())\r\n\r\n\r\nThe library can be installed by one of the following methods:\r\n\r\n* using `go get`\r\n\r\n\t```\r\n\tgo get github.com/ventu-io/go-shortid\r\n\t```\r\n\r\n* via cloning this repository:\r\n\r\n\t```\r\n\tgit clone git@github.com:ventu-io/go-shortid.git ${GOPATH}/src/github.com/ventu-io/go-shortid\r\n\t```\r\n\r\n### Id Length\r\n\r\nThe standard Id length is 9 symbols when generated at a rate of 1 Id per millisecond,\r\noccasionally it reaches 11 (at the rate of a few thousand Ids per millisecond) and very-very\r\nrarely it can go beyond that during continuous generation at full throttle on high-performant\r\nhardware. A test generating 500k Ids at full throttle on conventional hardware generated the\r\nfollowing Ids at the head and the tail (length > 9 is expected for this test):\r\n\r\n    -NDveu-9Q\r\n \tiNove6iQ9J\r\n \tNVDve6-9Q\r\n \tVVDvc6i99J\r\n \tNVovc6-QQy\r\n \tVVoveui9QC\r\n \t...\r\n \ttFmGc6iQQs\r\n \tKpTvcui99k\r\n \tKFTGcuiQ9p\r\n \tKFmGeu-Q9O\r\n \ttFTvcu-QQt\r\n \ttpTveu-99u\r\n\r\n### Life span\r\n\r\nThe package guarantees the generation of unique Ids with no collisions for 34 years\r\n(1/1/2016-1/1/2050) using the same worker Id within a single (although can be concurrent)\r\napplication provided application restarts take longer than 1 millisecond. The package supports\r\nup to 32 workers all providing unique sequences from each other.\r\n\r\n### Implementation details\r\n\r\nAlthough heavily inspired by the node.js [shortid][nodeshortid] library this is\r\nnot just a Go port. This implementation\r\n\r\n* is safe to concurrency (test included);\r\n* does not require any yearly version/epoch resets (test included);\r\n* provides stable Id size over a the whole range of operation at the rate of 1ms (test included);\r\n* guarantees no collisions: due to guaranteed fixed size of Ids between milliseconds and because\r\nmultiple requests within the same ms lead to longer Ids with the prefix unique to the ms (tests\r\nincluded);\r\n* supports 32 instead of 16 workers (test included)\r\n\r\nThe algorithm uses less randomness than the original node.js implementation, which permits to extend\r\nthe life span as well as reduce and guarantee the length. In general terms, each Id has the\r\nfollowing 3 pieces of information encoded: the millisecond since epoch (first 8 symbols, epoch:\r\n1/1/2016), the worker Id (9th symbol), the running concurrent counter within the millisecond (only\r\nif required, spanning over all remaining symbols).\r\n\r\nThe element of randomness per symbol is 1/2 for the worker and the millisecond data and 0 for the\r\ncounter. The original algorithm of the node.js library uses 1/4 throughout. Here 0 means no\r\nrandomness, i.e. every value is encoded using a 64-base alphabet directly; 1/2 means one of two\r\nmatching symbols of the supplied alphabet is used randomly, 1/4 one of four matching symbols. All\r\nmethods accepting the parameters that govern the randomness are exported and can be used to directly\r\nimplement an algorithm with e.g. more randomness, but with longer Ids and shorter life spans.\r\n\r\n## Changelog\r\n\r\n#### 4 Jan 2016: Version 1.0\r\n\r\n* [First release](https://github.com/ventu-io/go-shortid/releases/tag/v1.0) of `shortid`. The first\r\nrelease of the go-shortid library brings short (normally 9 symbols), unique, non sequential and\r\nURL friendly Ids that can be generated without any collisions until 2050.\r\n\r\n## License\r\n\r\nCopyright (c) 2016 Ventu.io, Oleg Sklyar, contributors.\r\n\r\nDistributed under a MIT style license found in the [LICENSE][license] file.\r\n\r\n**[Original algorithm][nodeshortid]:** Copyright (c) 2015 Dylan Greene, contributors. The same MIT\r\nlicense applies. Many thanks to Dylan for putting together the original node.js library, which\r\ninspired this \"port\":\r\n\r\n**Seed computation:** based on The Central Randomizer 1.3. Copyright (c) 1997 Paul Houle (houle@msc.cornell.edu)\r\n\r\n\r\n[go]: https://golang.org\r\n[docs]: https://godoc.org/github.com/ventu-io/go-shortid\r\n[godocimage]: http://img.shields.io/badge/godoc-reference-blue.svg?style=flat\r\n[travis]: https://travis-ci.org/ventu-io/go-shortid\r\n[buildimage]: https://travis-ci.org/ventu-io/go-shortid.svg?branch=master\r\n[codecov]: https://codecov.io/github/ventu-io/go-shortid?branch=master\r\n[codecovimage]: https://codecov.io/github/ventu-io/go-shortid/coverage.svg?branch=master\r\n\r\n\r\n[license]: https://github.com/ventu-io/go-shortid/blob/master/LICENSE\r\n\r\n[nodeshortid]: https://github.com/dylang/shortid\r\n\r\n[goreportcard]: http://goreportcard.com/report/ventu-io/go-shortid\r\n[goreportcardimage]: https://img.shields.io/badge/goreportcard-A%2B-brightgreen.svg\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}